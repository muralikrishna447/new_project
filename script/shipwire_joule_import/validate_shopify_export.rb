require 'csv'
require 'optparse'
require 'shopify_api'
require 'lob'
require 'json'
require 'pry'

#
# Validates a Shopify CSV export generated by the 'export_shopify_orders' script.
# The script will validate orders according to issues that are known to cause
# import failures in Shipwire. It will also apply tags to the order indicating
# what needs to be fixed using the Shopify API.
#
# The output of this script is a filtered list of CSV input rows that are deemed
# to be valid.
#
# Options:
#   --key: Your Shopify API key
#   --password: Your Shopify API key password
#   --store: The name of the Shopify store ('delve' for prod, or 'chefsteps-staging')
#   --input: The input CSV file generated by the 'export_shopify_orders' script.
#

# Options parsing
@options = {}
option_parser = OptionParser.new do |option|
  option.on('-k', '--key API_KEY', 'Shopify API key') do |api_key|
    @options[:api_key] = api_key
  end

  option.on('-p', '--password PASSWORD', 'Shopify password') do |password|
    @options[:password] = password
  end

  option.on('-s', '--store STORE', 'Shopify store name') do |store|
    @options[:store] = store
  end

  option.on('-i', '--input FILE', 'CSV input file of Shopify orders') do |file|
    @options[:file] = file
  end

  option.on('-l', '--lob-key LOB_API_KEY', 'Lob API key to use when verifying addresses') do |lob_key|
    @options[:lob_key] = lob_key
  end

  option.on('-a', '--verify-addresses', 'Whether to verify addresses') do
    @options[:verify_addresses] = true
  end

  option.on('-d', '--dry-run', 'Do a dry run and do not update the Shopify order tags') do
    STDERR.puts 'NOTE: Dry run option enabled, not really updating Shopify tags'
    @options[:dry_run] = true
  end
end

option_parser.parse!
raise '--key is required' unless @options[:api_key]
raise '--password is required' unless @options[:password]
raise '--store is required' unless @options[:store]
raise '--input is required' unless @options[:file]
if @options[:verify_addresses] && !@options[:lob_key]
  raise '--lob_key is required when specifying --verify_addresses'
end

# Configure shopify client
ShopifyAPI::Base.site = "https://#{@options[:api_key]}:#{@options[:password]}@#{@options[:store]}.myshopify.com/admin"

# Configure Lob address verification client
if @options[:verify_addresses]
  Lob.api_key = @options[:lob_key]
  @lob = Lob.load
end

def apply_tags(order_id, tags)
  order = ShopifyAPI::Order.find(order_id)
  raise "Order with id #{order_id} not found" unless order

  order_tags = order.tags.split(',')
  order_tags.each(&:strip!)
  # Only add validation tags that are not already on the order
  tags_to_apply = tags.select { |tag| !order_tags.include?(tag) }
  unless tags_to_apply.empty?
    tags_to_apply.each { |tag| order_tags << tag }
    order.tags = order_tags.join(',')
    STDERR.puts "Adding tags to order with id #{order_id}: #{tags_to_apply.inspect}"
    order.save unless @options[:dry_run]
  end
end

def address_verifies?(input_row)
  begin
    @lob.addresses.verify(
      address_line1: input_row['shipping_address_1'],
      address_line2: input_row['shipping_address_2'],
      address_city: input_row['shipping_city'],
      address_state: input_row['shipping_province'],
      address_zip: input_row['shipping_zip'],
      address_country: input_row['shipping_country']
    )
  rescue Lob::InvalidRequestError => e
    error = JSON.parse(e.json_body)
    return false if error.fetch('error').fetch('message') == 'address not found'
    raise "Unexpected error from address verification API: #{e.inspect}"
  end
  true
end

filtered_order_rows = []
valid_order_count = 0
invalid_order_count = 0
CSV.foreach(@options[:file], headers: true) do |input_row|
  order_validation_tags = []

  shipping_address_1 = input_row['shipping_address_1']
  # Some orders have no shipping address
  shipping_address_missing = false
  if shipping_address_1.nil? || shipping_address_1.empty?
    shipping_address_missing = true
    order_validation_tags << 'shipping-validation-address-1-missing'
  end
  # Shipwire limits address lines to 50 chars
  if shipping_address_1 && shipping_address_1.length > 50
    order_validation_tags << 'shipping-validation-address-1-too-long'
  end

  # Shipwire limits address lines to 50 chars
  shipping_address_2 = input_row['shipping_address_2']
  if shipping_address_2 && shipping_address_2.length > 50
    order_validation_tags << 'shipping-validation-address-2-too-long'
  end

  # Verify the address using Lob API
  if @options[:verify_addresses] && !shipping_address_missing
    unless address_verifies?(input_row)
      order_validation_tags << 'shipping-validation-address-unverifiable'
    end
  end

  if order_validation_tags.empty?
    STDERR.puts "Order with id #{input_row['id']} is valid"
    filtered_order_rows << input_row
    valid_order_count += 1
  else
    STDERR.puts "Filtering order with id #{input_row['id']} with validation errors: #{order_validation_tags}"
    order_validation_tags << 'shipping-validation-error'
    apply_tags(input_row['id'], order_validation_tags)
    invalid_order_count += 1
  end
end
STDERR.puts "Found #{valid_order_count} valid orders and filtered #{invalid_order_count} invalid orders"

output_str = CSV.generate(force_quotes: true) do |output_rows|
  output_rows << [
    'id',
    'name',
    'processed_at',
    'shipping_name',
    'shipping_address_1',
    'shipping_address_2',
    'shipping_city',
    'shipping_province',
    'shipping_zip',
    'shipping_country',
    'email',
    'shipping_phone',
    'sku',
    'quantity'
  ]
  filtered_order_rows.each { |row| output_rows << row }
end
puts output_str
